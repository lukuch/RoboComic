name: CI/CD Pipeline

permissions:
  contents: read
  security-events: write

on:
  push:
    branches: [ main, deploy-test ]
  pull_request:
    branches: [ main ]

jobs:
  # Backend Testing & Quality
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: backend/.venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('backend/pyproject.toml') }}

    - name: Install dependencies
      run: poetry install --only main,dev

    - name: Secret scan with Gitleaks
      uses: gitleaks/gitleaks-action@v2
      with:
        args: "--path=./backend"

    - name: Run code formatting check
      run: poetry run black --check --diff .

    - name: Run import sorting check
      run: poetry run isort --check-only --diff .

    - name: Run linting
      run: poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Run tests with coverage
      env:
        OPENAI_API_KEY: dummy
        ELEVENLABS_API_KEY: dummy
        COMEDIAN1_VOICE_ID: dummy
        COMEDIAN2_VOICE_ID: dummy
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)
        poetry run pytest --cov=. --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Test Docker build
      run: docker build -t robocomic-backend:test .

  # Frontend Testing & Quality
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run Prettier formatting check
      run: npm run format

    - name: TypeScript strict check
      run: npx tsc --noEmit --strict

    - name: Type check
      run: npx tsc --noEmit

    - name: Build application
      run: npm run build

    - name: Analyze bundle size
      run: |
        npm install -g @next/bundle-analyzer
        ANALYZE=true npm run build

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install backend dependencies
      run: pip install -r ./backend/requirements.txt

    - name: Debug requirements.txt
      run: cat ./backend/requirements.txt

    - name: Run Snyk for Python
      uses: snyk/actions/python@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --debug --skip-unresolved --severity-threshold=high --file=backend/requirements.txt --package-manager=pip --project-name=robocomic-backend

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'HIGH,CRITICAL'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # API Health Check
  api-health:
    runs-on: ubuntu-latest
    needs: [backend]
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --only main

    - name: Start backend server
      run: |
        poetry run python -m uvicorn main:app --host 0.0.0.0 --port 8000 &
        sleep 10

    - name: Test API endpoints
      run: |
        poetry run python -c "
        import requests
        import time
        
        # Wait for server to be ready
        time.sleep(5)
        
        # Test health endpoint
        response = requests.get('http://localhost:8000/health')
        assert response.status_code == 200, f'Health check failed: {response.status_code}'
        
        # Test personas endpoint
        response = requests.get('http://localhost:8000/personas')
        assert response.status_code == 200, f'Personas endpoint failed: {response.status_code}'
        
        # Test LLM config endpoint
        response = requests.get('http://localhost:8000/llm-config')
        assert response.status_code == 200, f'LLM config endpoint failed: {response.status_code}'
        
        print('All API endpoints are working correctly!')
        "

  # Quality Gate
  quality-gate:
    runs-on: ubuntu-latest
    needs: [backend, frontend, security, api-health]
    if: always()
    
    steps:
    - name: Check all jobs passed
      run: |
        if [ "${{ needs.backend.result }}" != "success" ]; then
          echo "Backend job failed"
          exit 1
        fi
        if [ "${{ needs.frontend.result }}" != "success" ]; then
          echo "Frontend job failed"
          exit 1
        fi
        if [ "${{ needs.security.result }}" != "success" ]; then
          echo "Security job failed"
          exit 1
        fi
        echo "All quality checks passed! âœ…" 